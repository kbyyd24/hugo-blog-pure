<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on 无糖拿铁，谢谢</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/tags/java/</link><description>Recent content in Java on 无糖拿铁，谢谢</description><generator>Hugo -- gohugo.io</generator><copyright>CC BY-NC 4.0 CN</copyright><lastBuildDate>Mon, 24 Feb 2020 21:09:31 +0000</lastBuildDate><atom:link href="https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Jackson 处理抽象类的序列化和反序列化</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/jackson-inheritance/</link><pubDate>Fri, 02 Oct 2020 21:38:48 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/jackson-inheritance/</guid><description>Json 的序列化和反序列化是我们常见的操作，很多库都提供了这样的能力帮助我们完成这样的操作。 但业务有时可能变得稍微有些复杂，需要将一个抽象类的子类</description></item><item><title>圈复杂度</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/cyclomatic-complexity/</link><pubDate>Sat, 15 Aug 2020 16:56:16 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/cyclomatic-complexity/</guid><description>过去我知道有圈复杂度这个概念，它代表了代码的复杂程度。但是却没有了解过它是怎么算出来的，哪些代码会影响它的结果。 今天我们就来看一下，圈复杂度</description></item><item><title>Eureka 中的幽灵 —— Self Preservation 导致的幽灵服务</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/eureka-self-preservation-mode/</link><pubDate>Sat, 25 Jul 2020 23:31:52 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/eureka-self-preservation-mode/</guid><description>Eureka 是 Spring Cloud Netflix 的服务注册与发现工具。一般情况下，它都能很好的工作，但有时却会出现一些匪夷所思的情况。 今天我们就来研究一下不当的配置导致的幽灵服务</description></item><item><title>如何使用 Spring Security ACL</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/how-to-use-spring-security-acl/</link><pubDate>Sat, 18 Jul 2020 12:17:26 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/how-to-use-spring-security-acl/</guid><description>在上一篇文章中，我们了解了 Spring Security ACL 的基本概念。 但是几乎没有涉及实现与使用的部分。这篇文章我们就来看一看如何在使用了 Spring 的项目中使用 Spring Securi</description></item><item><title>Spring Security ACL 核心概念和组件</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-acl-conception-and-component/</link><pubDate>Thu, 02 Jul 2020 01:21:40 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-acl-conception-and-component/</guid><description>Spring Security 提供了一个 ACL 模块，也就是 Access Control List，用来做访问控制。 目的是解决 谁对什么资源有什么权限 的问题。 这里的重点是具体的资源。 面临的问题 我们通过</description></item><item><title>你的 docker stop，它优雅吗？</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/graceful-shutdown-docker-container/</link><pubDate>Thu, 18 Jun 2020 22:46:13 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/graceful-shutdown-docker-container/</guid><description>我们平时在使用 Docker 的时候，一般会使用 ctrl+c 或者 docker stop 的方式关闭容器。 但有时候我们可能会遇到 ctrl+c 不生效，或者 docker stop 之后要等待 10s 的情况，就像这样： 也许你会觉</description></item><item><title>Spring Security 的权限验证</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-authorization/</link><pubDate>Sat, 13 Jun 2020 16:33:33 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-authorization/</guid><description>在前面的文章里，我们对 Spring Security 进行权限验证的组件有了大致的了解，我们首先来回顾并探究一下细节。 Figure 1. 本文涉及到的组件 FilterSecurityInterceptor 这是 AbstractSecurityInterceptor 的一个子类，并且实现了</description></item><item><title>Spring Security 中的身份认证</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-authentication/</link><pubDate>Sun, 07 Jun 2020 22:04:29 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-authentication/</guid><description>本文介绍 Spring Security 的身份认证的内容，研究 Spring Security 自带的身份认证方式和添加自己的身份认证方式的方法。 身份认证相关组件 在上一篇文章中，我们了解到了 Spring Security 会将</description></item><item><title>话题系列</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/series-index/</link><pubDate>Sun, 31 May 2020 20:13:02 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/series-index/</guid><description>Spring Security Servlet</description></item><item><title>Spring Security</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/series/spring-security-servlet/</link><pubDate>Sun, 31 May 2020 20:01:34 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/series/spring-security-servlet/</guid><description>Spring Security 系列的文章列表： Spring Security 概览 Spring Security 中的身份认证 Spring Security 中的权限验证 Spring Security ACL 核心概念和组件 如何使用 Spring Security ACL</description></item><item><title>Spring Security Servlet 概览</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-servlet-overview/</link><pubDate>Sun, 31 May 2020 19:58:38 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/spring-security-servlet-overview/</guid><description>Spring Security 是 Spring 框架中用于实现 Security 相关需求的项目。我们可以通过使用这个框架来实现项目中的安全需求。 今天这篇文章将会讨论 Spring Security Servlet 是如何工作的。 之所以将内容</description></item><item><title>使用 Gradle 的 Java 插件构建 Java 项目</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-gradle-to-build-java-project/</link><pubDate>Mon, 24 Feb 2020 21:09:31 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-gradle-to-build-java-project/</guid><description>在上一篇文章中，我们在没有使用任何插件的情况下，练习了使用 Gradle 构建 Java 项目，最后得到一个脆弱的构建脚本和不符合约定的目录结构。 对此，Gradle</description></item><item><title>使用 Gradle 但不使用 Java 插件构建 Java 项目</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-gradle-to-build-java-project-without-plugin/</link><pubDate>Sat, 22 Feb 2020 23:42:35 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-gradle-to-build-java-project-without-plugin/</guid><description>本文目标是探索在没有使用任何额外插件的情况下，如何使用 Gradle 构建一个 Java 项目，以此对比使用 Java 插件时得到的好处。 初始化项目 使用 Gradle Init 插件提供的 init task 来创</description></item><item><title>《微服务架构设计模式》读书总结</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/microservice-arch-pattern/</link><pubDate>Sat, 01 Feb 2020 02:53:38 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/microservice-arch-pattern/</guid><description>《微服务架构设计模式》这本书介绍了引入微服务架构后面临的挑战，提供了一些模式用于应对这些挑战。所有的模式都可以在 作者的网站上找到，书上只是使</description></item><item><title>端口与适配器架构</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/hexagonal-architecture/</link><pubDate>Sun, 05 Jan 2020 19:26:44 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/hexagonal-architecture/</guid><description>端口与适配器架构又被称为六边形架构，是一种约定代码设计的架构。它解决的是如何设计代码的问题，主要的关注点在于业务与技术的解耦。 第一次看到这个</description></item><item><title>Spring 里那么多种 CORS 的配置方式，到底有什么区别</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/how-spring-implement-cors/</link><pubDate>Fri, 14 Jun 2019 22:14:37 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/how-spring-implement-cors/</guid><description>作为一个后端开发，我们经常遇到的一个问题就是需要配置 CORS，好让我们的前端能够访问到我们的 API，并且不让其他人访问。而在 Spring 中，我们见过很</description></item><item><title>HTTP Headers 之 Origin</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/http-headers-origin/</link><pubDate>Thu, 23 May 2019 21:33:34 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/http-headers-origin/</guid><description>概念 HTTP 协议中的 Origin Header 存在于请求中，用于指明当前请求来自于哪个站点。 字段内容 Origin 仅仅包含站点信息，不包含任何路径信息。 语法 Origin: &amp;#34;&amp;#34; Origin: &amp;#34;&amp;lt;schema&amp;gt;://&amp;lt;host&amp;gt;[:port]&amp;#34; // 例如 Origin: &amp;#34;https://baidu.com&amp;#34; // 错误</description></item><item><title>Java内存回收算法介绍</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/java-memory-collection-algorithms/</link><pubDate>Sun, 10 Feb 2019 22:18:24 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/java-memory-collection-algorithms/</guid><description>JVM 提供了自动化的内存管理，使得开发者不需要编写内存回收的代码。但是，JVM 是如何工作的呢？是如何知道哪些内存应该被清理呢？又如何减小垃圾回收</description></item><item><title>使用 git submodule 管理 Hexo 博客的主题</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-git-submodule-to-manage-your-hexo-theme/</link><pubDate>Thu, 20 Dec 2018 01:26:17 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/use-git-submodule-to-manage-your-hexo-theme/</guid><description>个人十分喜欢 Hexo 博客框架下的 NexT 主题，所以自己的博客也就选择的这个主题。然而最近换了电脑之后傻眼了，git clone 之后发现 themes/next 是个空目录，github 上</description></item><item><title>什么是 Twelve-Factor App</title><link>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/what-is-12-factors-app/</link><pubDate>Thu, 27 Sep 2018 01:14:37 +0000</pubDate><guid>https://blog.gaoyuexiang.cn/kbyyd24.github.io.candidate/posts/what-is-12-factors-app/</guid><description>在学习 Spring Cloud 的时候，文档一开始就提到了一个概念：Twelve-Factor App。这勾起了我的好奇心，刚好有个网站用来解释这个东西，这里谈谈我</description></item></channel></rss>